----------------------------------Exercise 1----------------------------------

Guess the results of the following expressions and then check yourself using
Kotlin:

val a = 11 / 3
val b = 11 % 3
val c = a * 3 + b
val d = 6 / 5.0

Note that the `val`s `a`, `b` and `c` have type `Int`, while the `val`
`d` has type `Double`.

----------------------------------Exercise 2----------------------------------

Check which of the following values can't be stored in an `Int` type:

- A million (10^6^)
- A billion (10^9^)
- A trillion (10^12^)
- A quintillion (10^18^)

----------------------------------Exercise 3----------------------------------

Create two functions: the first converts Fahrenheit to Celsius, and the second
converts Celsius to Fahrenheit. To convert Fahrenheit to Celsius, first
subtract `32`, then multiply by `5/9`. If you get `0`, check to make sure you
aren't using integer math. To convert Celsius to Fahrenheit, first multiply by
`9/5`, then add `32`.

----------------------------------Exercise 4----------------------------------

Write a function that produces the time in milliseconds given a period of time
in hours, minutes and seconds. (One second is a thousand milliseconds). For
example, an hour and a half is `5_400_000` milliseconds.

HINT: Make sure you store all intermediate computations in a `Long`, otherwise
you can produce incorrect results. For example, if you convert one billion
hours to milliseconds but don't store those milliseconds in a `Long`, you'll
get an overflow:

// Int computation causes integer overflow:
1_000_000_000 * 60 = -129542144
// Long computation succeeds:
1_000_000_000 * 60L = 60000000000L

