----------------------------------Exercise 1----------------------------------

Create a `data class DataMany` containing constructor arguments `a`-`j` with
default arguments 1-10. Define a function `all()` that destructures a
`DataMany` and displays the result on the console with each element separated
by a space. Show that `component1()` and `component10()` have been
automatically generated.

Define `firstHalf()` so it destructures and displays the first five elements,
and `secondHalf()` so it does the same for the second five, ignoring the first
five. Define `interspersed()` so that it captures and displays the first
element and every other one, ignoring the elements in between.

The starter code in `main()` tests your work.

----------------------------------Exercise 2----------------------------------

Define a function `create()` that produces a `MutableList` containing ten
`Int`s, initialized to the values 0-9.

Each remaining function first displays its function name.

- `assignAppendIncrementContains()`:  Call `create()` and capture the result in
`list`. Set the last element of `list` to 99, then append 100 to `list`.
Increment this new last element, and display the list. Finally, display whether
101 is present in `list`.

- `minus()`: Call `create()` and capture the result in `val list`. Display the
`list` with the element 5 removed. Display the list with the elements 5, 6, 7
and 8 removed. Display the list with the element 10 removed. Use the
"decrement-equals" to remove the elements 0, 1 and -1 and display the result.

- `plus()`: Create a `var list` by adding 11, 12 and 13 to the result of
`create()`. Use the "increment-equals" to append 14, and display the result.

The starter code in `main()` tests your work.

----------------------------------Exercise 3----------------------------------

Create a `data class N(var n: Int)` and make it `Comparable`. In `main()`,
create a `key` initialized to `N(11)`, and a `map` initialized to a
`MutableMap` containing a single entry, with `key` mapped to `47`. Display
`map[key]`. Now increment `n` and try to display `map[key]` again.

Create a `List<N>` of size five, automatically initialized to `N(it)`, and
shuffle it using the provided `Random` object. Display the `List`, then convert
it to a `SortedSet` and display that to see that it is indeed sorted. Find the
minimum value and add two to its `n`. Display the set again to see what
happened.

Adapt your code until it produces the same output as seen in the exercise
output.

The calculation in `compareTo()` impacts numerous operations including those
for using the object as a key in a `Map` and an element in a `Set`. As this
exercise shows, you should be very reluctant to allow the values used in the
`compareTo()` calculation to vary.

