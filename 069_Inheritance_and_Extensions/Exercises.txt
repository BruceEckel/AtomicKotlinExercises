----------------------------------Exercise 1----------------------------------

The starter code contains `Duck` and `interactWithDuck()` declarations (we
assume they're part of the third-party library). Implement the `mimicDuck()`
function that dynamically adapts an object, accepting a `Crocodile` and
returning an `IAmHonestlyDuck`. `IAmHonestlyDuck` should implement `Duck` and
delegate both `Duck` member functions to `crocodile.bite()`. Is it possible to
use inheritance, or are you forced to use composition?

----------------------------------Exercise 2----------------------------------

The starter code defines the following hierarchy: a superclass `Dog` and two
subclasses, `ToyDog` and `RealDog`. Implement an extension function that
extends `Dog`. `play()` first calls `speak()`, then `sit()`.

Implement two more extension functions with the same name `play()` that extend
`RealDog` and `ToyDog`. Both functions should call `Dog.play()` first, then
`RealDog.play()` should call `feed()`, while `ToyDog.play()` should call
`changeBatteries()`.

Guess what the code in `main()` will trace and then check yourself.

HINT: To call a `Dog.play()` function inside an extension to a `Dog` subclass
(e.g. inside `ToyDog.play()`), cast `this` to `Dog` explicitly:

(this as Dog).play()

