----------------------------------Exercise 1----------------------------------

The starter code defines a `String` called `text`. Define a `writeAndRead()`
function that uses `java.io.File`. Create a `File` object initialized to
`"Soln1.txt"`. Delete the file if it exists. Then create it, and add `text` to
the file (IntelliJ IDEA will give you hints to help choose the member functions
to call for `File`). Use `useLines()` to read the file and display it with
`println()`, then use `forEachLine()` to read the file and display it with
`println()`. The starter code in `main()` tests `writeAndRead()`.

----------------------------------Exercise 2----------------------------------

Create your own `AutoCloseable` class called `Cleanup`, containing `f()`, `g()`,
`h()` and `close()` that use `println()` to display `"f()"`, `"g()"`, `"h()"`
and `"close()"`, respectively. In `main()`, create a `Cleanup` object and call
`f()`, `g()` and `h()` via `use()`.

----------------------------------Exercise 3----------------------------------

The goal of this exercise is to verify that, regardless of the way your code
exits a `use()` block, the `close()` function is always called. Reuse the
`Cleanup` class you created in Exercise 2, which is included in the starter
code, along with an `enum class Option { Normal, Return, Throw }`.

Define a function `verifyClose(opt: Option)`. `verifyClose()` creates a
`Cleanup` object and invokes `use()` on it. The lambda for `use()` contains a
`when` expression that implements these rules. When `opt` is:

- `Normal`: `f()` is called, then `g()` (inside the `when`
  expression), then `h()`, before leaving the `use()` block.

- `Return`: `f()` is called and then `return`. This exits the
  middle of the `use()` block.

- `Throw`: `f()` is called and then an `Exception` is thrown from
  the middle of the `use()` block.

`main()` tests your code.

