----------------------------------Exercise 1----------------------------------

The starter code includes a `data` class called `Pet` containing a `var String`
property `name` and an `enum` property `habitat`. The `Habitat` enumeration can
be `LAND`, `WATER` or `AMPHIBIOUS`, and it also contains a member function
`livesIn(pet: Pet)` that tests to see whether `pet` lives in a particular
`Habitat`.

The `main()` starter code creates a `List<Pet>`. Using `filter()` together with
member references, implement three functions `livesOnLand()`, `livesInWater()`
and `areAmphibious()` that discover which pets in the list live on land, in the
water, or are amphibious. Lastly, use `partition()` to implement the
`partitionAmphibious()` function that divides the pets into those that are
amphibious and those that are not.

----------------------------------Exercise 2----------------------------------

The starter code defines a `Student` class. Complete the implementation of
`sortByGradeAndThenByName()` as an extension function to `List<Student>`. First
sort the students by their grade in descending order (starting from the highest
grade), then sort by `lastName`, then `firstName`.

----------------------------------Exercise 3----------------------------------

To illustrate different types of member references, consider three
characteristics of natural numbers: whether a number is even, whether it's
prime (doesn't have divisors other than 1 and itself), and whether it's
*perfect*. A perfect number means that the sum of all the divisors (excluding
the number itself) equals the number. For example, 6 is a perfect number: `6 =
1 + 2 + 3`, where 1, 2, 3 are the divisors.

`isEven` is an extension property, `isPrime()` is an extension function and
`isPerfect()` is a top-level function. Your task is to complete the
implementations and pass the corresponding property or function reference to
different filter invocations in `main()`.

