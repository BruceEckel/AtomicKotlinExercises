----------------------------------Exercise 1----------------------------------

Create a class that begins:

class WrapRange(
  val range: IntRange,
  private var current: Int = range.start
) {

Write member functions so that you can increment and decrement a `WrapRange`
object but `current` automatically stays within `range`.

Make any necessary modifications so the starter code in `main()` produces the
exercise output shown.

----------------------------------Exercise 2----------------------------------

Starting with:

enum class Count {
  Eeny, Meeny, Miney, Moe;
  companion object {
    val max = Moe
  }
}

Create extension functions to perform the operations `++` and `--` on a `Count`
such that if `++` tries to go past `Moe`, it wraps around to `Eeny`, and if
`--` tries to go below `Eeny`, it wraps around to `Moe`. The starter code
in `main()` will check your work.

----------------------------------Exercise 3----------------------------------

Create a collection-like `class Repository<T>(val initSize: Int = 10)`. It
contains a `private MutableList` called `list` of initial size `initSize`, with
all the elements initialized to `null`. Provide support for the following
operations for a `Repository` named `r`:

- `r += rv` Places `rv` in the first available `null` location in `list`. If
  there are no `null` locations remaining, appends `rv` to the end of `list`.

- `r[n] = rv` Places `rv` into location `n` in `list`. Requires that `n` be
  greater than zero and less than `list.size`. Requires that `list[n]` be
  non-`null`.

- `r[n]` Retrieves the value `list[n]`. Requires that `n` be greater than zero
  and less than `list.size`. Requires that `list[n]` be non-`null`.

Add a `toString()` that produces `list` separated by commas.

The starter code in `main()` tests `Repository` and shows you how the error
messages should appear.

