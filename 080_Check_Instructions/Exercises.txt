----------------------------------Exercise 1----------------------------------

Create a function `f(s: String): String`. Add `require()` calls that use the
following error strings (infer the tests from the strings):

- `"s must not be empty, is [$s]"`

- `"s must not be blank, is [$s]"`

- `"s must contain 3 parts " +
    "separated by '-', is [$s]"`

If all `require()`s succeed, return `s`.

Create a function `fun g(d: Double): Double` that uses `require()` to ensure
that `d` is greater than zero and less than or equal to 10.0. Do not provide a
custom error message for `require()`. If the `require()` succeeds, return `d`.

The starter code in `main()` tests `f()` and `g()`.

----------------------------------Exercise 2----------------------------------

Modify Exercise 1 by making the function parameters nullable, writing the
new functions as:

- `fn(s: String?): String`

- `gn(d: Double?): Double`

The starter code in `main()` tests `fn()` and `gn()`.

----------------------------------Exercise 3----------------------------------

This exercise further explores ranges, introduced in [Looping &
Ranges](#looping-and-ranges), and shows how they can be used with check
instructions.

Create a class `Level` with two constructor arguments: `val range: IntRange`,
and `private var level: Int`. `level` has a default argument that is the
bottom value of `range`. The constructor should ensure that `level` is one
of the values in `range`.

Add a read-only `value` property that produces the value of `level`.

Add a function `up()` that increments `level` only if the result is within
`range`, and a function `down()` that decrements `level` only if the result
is within `range`. Finally, add a function `set(new: Int)` that first ensures
that `new` is within `range` and then assigns `new` to `level`.

`Level` is tested by the starter code in `main()`.

----------------------------------Exercise 4----------------------------------

Create a `class Tank(val capacity: Double)`, where `capacity` is the maximum
amount the `Tank` can hold. Add a `safetyGap` property that calculates a 2%
gap of empty space that must be preserved at the top of the `Tank`. The current
amount in the `Tank` is held in a read-only property called `level`. The actual
allowable amount the tank can hold is `maxLevel`.

Define two member functions for `Tank`:

- `add(quantity: Double): Double`, where `quantity` must be positive. Only add
  enough of the `quantity` to fill the tank up to `maxLevel` and put the rest in
  `remainder`. At the end of the function check that `level` is greater than
  zero, that `level` is less than or equal to `maxLevel`, and that `remainder` is
  greater than or equal to zero. Then return `remainder`.

- `drain(quantity: Double)`, where `quantity` must be positive and cannot
  exceed the `level` in the `Tank`. After removing `quantity` from the tank,
  check that the `level` is greater than or equal to zero.

The starter code in `main()` tests your `Tank` class and shows what error
messages to use in your `require()` and `check()` calls.

Notice that the calls to `check()` do not fail as long as the internal function
logic is correct. That is, if a `check()` throws an exception, it indicates a
programming error. For this reason, `check()` calls may be removed once the
code is verified, to improve performance. It is best to leave them in to
maintain code verification, but if that isn't possible you can convert the
`check()` tests into unit tests (see [Unit Testing](#unit-testing)).

