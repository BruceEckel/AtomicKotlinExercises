----------------------------------Exercise 1----------------------------------

Define the following functions so they behave the same as their standard
library counterparts:

- `createString()` behaves like `buildString()`. Start by creating a new
instance of `StringBuilder`, call the extension lambda argument on it, then
return the `String` result.

- `createList()` behaves like `buildList()`. This function has one generic
parameter. Create an `ArrayList<T>`, call the extension lambda argument on it,
and return the `List` in immutable form.

- `createMap()` behaves like `buildMap()`. This function has two generic
parameters. Create a `HashMap<K, V>`, call the extension lambda argument on it,
and return the `Map` in immutable form.

The code in `main()` tests your functions against the standard library
versions. Notice that `buildList()` and `buildMap()` infer their generic
parameters.

----------------------------------Exercise 2----------------------------------

Import `sandwich.*` and create a function `sandwich2()` following the example
of `sandwich()`. Insert a first parameter `prepare`, which is an extension
lambda that allows the user to choose whether to toast the `Sandwich`, with the
default untoasted.

Add a function `sandwich3()` which is an extension function for `Sandwich`. The
user can provide a `Sandwich` receiver that may or may not be already toasted.

The starter code and the code in `main()` tests your functions.

----------------------------------Exercise 3----------------------------------

The starter code contains definitions for `class Cleanser` and `class
SprayCleanser`. Write the functions `cleanser()` and `sprayCleanser()` so the
code in `main()` works correctly.

