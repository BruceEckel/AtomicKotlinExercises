----------------------------------Exercise 1----------------------------------

Convert `Configuration.kt` to use a `Map` instead of a file. The starter code
in `main()` tests your new `Configuration` class.

----------------------------------Exercise 2----------------------------------

Starting with `Add.kt`, add a `setValue()` extension function to `Sum` that
assigns its `value` argument to `a` in `Add` (change `Add` to make this work).
The starter code in `main()` tests your solution.

----------------------------------Exercise 3----------------------------------

Start with:

class Delegator {
  private var list = List(8) { "$it" }
  var strings by list
}

Define `getValue()` and `setValue()` as extension functions to `List<String>`
(Hint: IntelliJ IDEA will generate skeletons for you). The code in `main()`
will test your solution.

BONUS: Try adjusting `getValue()` and `setValue()` to work with:

class Delegator {
  var strings by List(8) { "$it" }
  ...

And explain what happens.

----------------------------------Exercise 4----------------------------------

Create a generic class that begins:

class Holder<E> {
  private var list = listOf<E>()

Define `getValue()` and `setValue()` for `Holder`, so that you can successfully
write:

class Holders {
  var strings by Holder<String>()
  var ints by Holder<Int>()
  var bools by Holder<Boolean>()
}

The starter code in `main()` will test your solution.

