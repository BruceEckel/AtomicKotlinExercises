----------------------------------Exercise 1----------------------------------

Modify `PropertyOptions.kt` so that "Compute 4" appears in the trace.

----------------------------------Exercise 2----------------------------------

Create a class `Outer` containing an `inner class` called `Inner`, both with an
`init` using `trace()` to announce "<class name> constructor". Add three `lazy`
`String` `val`s, each with an initializer tracing "Initializing <class
name>.<property name>": `s1` and `s2` in `Outer`, and `si` in `Inner`. The
initializers produce "Hi" for `s1`, "Hello $s1" for `s2`, and "Howdy $s2" for
`si`. The starter code in `main()` tests your solution.

----------------------------------Exercise 3----------------------------------

Do not use explicit typing in this exercise, to demonstrate that the type is
inferred from the result of the `lazy` initializer.

Create two classes, `A` and `B`, each with an `init` that uses `trace()` to
announce "<class name> constructor". Add the following `lazy` `val` properties:

- `b` in `A`, which lazily initializes a `B` object.
- `i` in `A`, which lazily initializes an `Int` to `1`.
- `j` in `B`, which lazily initializes an `Int` to `2`.

Each lazy initializer traces "Initializing <class name>.<property name>".

In `B`, add `fun g()` that produces `j`. In `A`, add `fun f()` that produces
`i + b.g()`.

In `main()`, add a lazily-initialized `val a` that traces its initialization
as above and then produces an `A` object. The remainder of `main()` is starter
code that tests your solution.

