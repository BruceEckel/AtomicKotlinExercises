----------------------------------Exercise 1----------------------------------

In `FillIt.kt`, `State` is only used to determine when there are no more
`Blank` spaces in `grid`. Simplify the program by removing `State` and
returning a `Boolean` from `turn()`. Once you have that working, add a third
player by changing  `enum class Mark { Blank, X ,O }` to `enum class Mark {
Blank, X, Y, Z }`. In `turn()`, use a `when` expression to move to the next
`player` value.

----------------------------------Exercise 2----------------------------------

In `NestedHouse.kt`, add two `Drawer`s to `Closet` and a `Bathtub` to
`Bathroom`.

----------------------------------Exercise 3----------------------------------

"Unpack" the nested classes in `NestedHouse.kt` by turning each nested class
into a global class.

----------------------------------Exercise 4----------------------------------

Improve the implementation of the *State* pattern in `Ticket.kt`. Change `Seat`
from an enumeration to a non-nested `abstract class`, with a nested subclass
for each `Seat` type. `Seat` contains `abstract` member functions for
`upgrade()` and `meal()`. There's also a `toString()` for `Seat` that produces
the `simpleName` of the specific subclass.

`Ticket` now becomes a simple holder for a `Seat` object, along with
`upgrade()` and `meal()` functions which forward their actions to the `Seat`
object.

Bonus (Challenging): Why can't you use delegation for `seat` in `Ticket`?

