----------------------------------Exercise 1----------------------------------

Create an `Alien` class with a constructor that initializes `public val name`
and `public val species` properties. Add a `private var planet` property
initialized by the constructor. `planet` can be modified with the
`movePlanet()` member function. `movePlanet()` takes the planet the `Alien` is
moving *to* as its parameter. All properties and parameters are of type
`String`. Override `toString()` to return the `name`, `species` and `planet` in
the format `"Alien $name, $species: $planet"`.

In `main()`, create two `Alien`s and move them from an origin `planet` to a
destination `planet`, testing them using `toString()` along with the data:

| `name`    | `species`  | Origin      | Destination |
|-----------|------------|-------------|-------------|
| Arthricia | Cat Person | PurgePlanet | Earth C-137 |
| Dale      | Giant      | Gearworld   | Parblesnops |

Note that a `val` property is safe to access directly as a `public` property
rather than making it `private`.

----------------------------------Exercise 2----------------------------------

Continue developing the `Robot` class from the exercises in the previous atoms.
Use `private` on all the properties and `crossBoundary()`, and verify that you
can't access the private members outside of the class.

----------------------------------Exercise 3----------------------------------

A `Robot` can only move forward. Check that the `steps` argument is a positive
number. For `right()`, `left()`, `down()` and `up()`, a negative or zero
`steps` argument should not update the location. Instead it should produce
console output using this `String`:

"steps argument must be positive, is $steps"

In `main()`, test your code using positive, negative and zero values of
`steps`.

