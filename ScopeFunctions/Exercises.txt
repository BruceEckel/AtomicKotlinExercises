----------------------------------Exercise 1----------------------------------

The starter code defines `class NumPair`. In `main()`, create `val np1` and
initialize it with `NumPair(10, 20)` with an `apply` scope that adds 5 to `x`
and 6 to `y`. Use `eq` to verify the result of `np1`. Now create `val np2` and
initialize it with `NumPair(30, 40)` that has an `also` scope that adds 7 to
`x` and 8 to `y`. Use `eq` to verify the result of `np2`.

Define `val result1` initialized with `np1.run` where the lambda sums the
results of `add()`, `subtract()`, and `multiply()`. Use `eq` to check the
result. Duplicate this functionality creating `result2` using `let` and
`result3` using `with`.

----------------------------------Exercise 2----------------------------------

Import the `SpaceShipControls` class from
`ClassDelegation/SpaceShipControls.kt`. Start your `main()` with:

fun main() {
  var velocity = 1
  with(SpaceShipControls()) {
    trace(forward(velocity))

also calling `right(velocity)` and `down(velocity)`, tracing the results of
each. At the closing `}` of the scope function, chain the result to a `let`
block, which increments `velocity`, then performs the same operations. At the
end of that block, chain to a `run` block, then an `apply` block and an `also`
block, performing the same operations in each block. Use `trace` to verify the
output.

----------------------------------Exercise 3----------------------------------

The starter code includes a definition for `class Math`. Create a `Math` object
with a `run` scope. Inside that scope, define `val z` which is initialized by
calling `np(11, 7)` with an `apply` scope. Inside that scope call `add() +
subtract()` and after closing the scope, call `calc()`. Use `eq` to check that
the result is 77. The return value from the `run()` scope is `z + add()`; use
`eq` to check that the result is 1077.

