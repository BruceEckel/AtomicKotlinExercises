----------------------------------Exercise 1----------------------------------

Create a `data class` called `Flag` containing a `Boolean` called `b` with a
default value of `false`. In `main()`, create three `var`s: `d` of type `Double`,
`s` of type `String` and `f` of type `Flag`, all delegated to `notNull()`. For
`d` and `f`, use explicit type declarations but for `s` use a type parameter
for `notNull()`.

Using `capture` from `atomictest`, try reading from `d`, `s` and `f` before
they are initialized and validate the output using `atomictest.eq`. Then set
`d` to `1.1`, `s` to `"yes"` and `f` to `Flag(true)` and use `eq` to verify
that they all take on the new values.

----------------------------------Exercise 2----------------------------------

Create a generic function `observe()` that uses `trace()` to capture
`"$propertyName $oldValue to $newValue"` whenever a property changes. Ensure
that it works with:

class Product(nm: String = "<0>", id: Int = -1) {
  var name by observable(nm, ::observe)
  var ident by observable(id, ::observe)
  override fun toString() = "$name $ident"
}

And that the starter code in `main()` successfully executes.

----------------------------------Exercise 3----------------------------------

Create a `class PositiveInt(i: Int)` containing a property `var n` such that
any value assigned to `n` can only be greater than zero. The starter code in
`main()` will test your solution.

